name: Publish Python 🐍 distribution 📦 to PyPI

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get previous and current version
        id: get_version
        run: |
          git fetch --prune --unshallow || true
          PREV_VERSION=$(git show HEAD^:pyproject.toml | grep '^version' | head -1 | sed 's/.*=\s*"\([0-9.]*\)"/\1/')
          CURR_VERSION=$(grep '^version' pyproject.toml | head -1 | sed 's/.*=\s*"\([0-9.]*\)"/\1/')
          echo "Previous version: $PREV_VERSION"
          echo "Current version: $CURR_VERSION"
          echo "prev_version=$PREV_VERSION" >> $GITHUB_ENV
          echo "curr_version=$CURR_VERSION" >> $GITHUB_ENV

      - name: Check for minor version bump
        id: check_minor
        run: |
          PREV_MINOR=$(echo ${{ env.prev_version }} | cut -d. -f2)
          CURR_MINOR=$(echo ${{ env.curr_version }} | cut -d. -f2)
          if [ "$CURR_MINOR" != "" ] && [ "$PREV_MINOR" != "" ] && [ "$CURR_MINOR" -gt "$PREV_MINOR" ]; then
            echo "minor_bump=true" >> $GITHUB_ENV
          else
            echo "minor_bump=false" >> $GITHUB_ENV
          fi

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish package to PyPI
        if: env.minor_bump == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PETRI_NET_CORE_CICD_TOKEN }}
        run: python -m twine upload dist/* --verbose